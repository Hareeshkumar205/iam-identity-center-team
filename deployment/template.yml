AWSTemplateFormatVersion: 2010-09-09
Description: Temporary Elevated Access Management (TEAM) Application stack
Parameters:
  Login:
    Type: String
    Description: IAM IDC Login URL
  CloudTrailAuditLogs:
    Type: "String"
    AllowedValues:
      - read_write
      - read
      - write
      - none
      - ""
    Description: "Read and Write CloudTrail logs"
  teamAdminGroup:
    Type: String
    Description: TEAM application Admin group
  teamAuditGroup:
    Type: String
    Description: TEAM application Auditor group
  tags:
    Type: String
    Description: TEAM application tags
    Default: ""
  teamAccount:
    Type: String
    Description: TEAM deployment account ID

Conditions:
  IsEmptyCloudTrailAuditLogs: !Equals [!Ref CloudTrailAuditLogs, ""]

Resources:
  TriggerAmplifyBuild:
    Type: Custom::TriggerAmplifyBuild
    Properties:
      ServiceToken: !GetAtt 'TriggerBuildLambda.Arn'
      appId: !GetAtt AmplifyApp.AppId
      branchName: main
      branch: !GetAtt AmplifyBranch.Arn

  AmplifyRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W9
            reason: "This is the main Amplify service role."
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole 
      Policies:
        - PolicyName: AmplifyPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - iam:PassRole
                Resource: arn:aws:iam::*:role/*

              - Effect: Allow
                Action:
                  - amplify:CreateBackendEnvironment
                  - amplify:CreateBranch
                  - amplify:CreateApp
                  - amplify:DeleteApp
                  - amplify:DeleteBranch
                  - amplify:GetApp
                  - amplify:GetBackendEnvironment
                  - amplify:GetBranch
                  - amplify:ListApps
                  - amplify:ListBackendEnvironments
                  - amplify:ListJobs
                  - amplify:ListWebHooks
                  - amplify:StartJob
                  - amplify:TagResource
                  - amplify:UpdateBranch
                  - amplifybackend:ListBackendJobs
                  - appsync:CreateDataSource
                  - appsync:CreateFunction
                  - appsync:CreateGraphqlApi
                  - appsync:CreateResolver
                  - appsync:DeleteDataSource
                  - appsync:DeleteFunction
                  - appsync:DeleteGraphqlApi
                  - appsync:DeleteResolver
                  - appsync:GetFunction
                  - appsync:GetGraphqlApi
                  - appsync:GetResolver
                  - appsync:GetSchemaCreationStatus
                  - appsync:ListTagsForResource
                  - appsync:TagResource
                  - appsync:StartSchemaCreation
                  - appsync:UpdateGraphqlApi
                  - appsync:UntagResource
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:GetTemplate
                  - cloudformation:GetTemplateSummary
                  - cloudformation:ListStackResources
                  - cloudformation:ListStacks
                  - cloudformation:TagResource
                  - cloudformation:UpdateStack
                  - cloudtrail:AddTags
                  - cloudtrail:CreateEventDataStore
                  - cloudtrail:DeleteEventDataStore
                  - cloudtrail:DescribeTrails
                  - cloudtrail:GetEventDataStore
                  - cloudtrail:GetTrailStatus
                  - cloudtrail:ListTrails
                  - cloudtrail:LookupEvents
                  - codecommit:*
                  - cognito-identity:CreateIdentityPool
                  - cognito-identity:DeleteIdentityPool
                  - cognito-identity:DescribeIdentityPool
                  - cognito-identity:ListIdentityPools
                  - cognito-identity:SetIdentityPoolRoles
                  - cognito-identity:TagResource
                  - cognito-idp:CreateGroup
                  - cognito-idp:CreateUserPool
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:CreateUserPoolDomain
                  - cognito-idp:DeleteGroup
                  - cognito-idp:DeleteUserPool
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:DescribeUserPoolDomain
                  - cognito-idp:ListIdentityProviders
                  - cognito-idp:ListTagsForResource
                  - cognito-idp:TagResource
                  - cognito-idp:UntagResource
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:UpdateUserPoolClient
                  - dynamodb:CreateTable
                  - dynamodb:DeleteTable
                  - dynamodb:DescribeContinuousBackups
                  - dynamodb:DescribeContributorInsights
                  - dynamodb:DescribeKinesisStreamingDestination
                  - dynamodb:DescribeTable
                  - dynamodb:DescribeTimeToLive
                  - dynamodb:ListTagsOfResource
                  - dynamodb:TagResource
                  - dynamodb:UntagResource
                  - dynamodb:UpdateContinuousBackups
                  - dynamodb:UpdateTimeToLive
                  - iam:List*
                  - iam:AttachRolePolicy
                  - iam:CreatePolicy
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DeletePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:GetPolicy
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                  - iam:UpdateAssumeRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:PassRole
                  - kms:CreateGrant
                  - kms:CreateKey
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:EnableKeyRotation
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:GetKeyPolicy
                  - kms:GetKeyRotationStatus
                  - kms:PutKeyPolicy
                  - kms:ScheduleKeyDeletion
                  - kms:TagResource
                  - kms:ListResourceTags
                  - kms:UntagResource
                  - lambda:AddLayerVersionPermission
                  - lambda:CreateEventSourceMapping
                  - lambda:CreateFunction
                  - lambda:DeleteEventSourceMapping
                  - lambda:DeleteFunction
                  - lambda:DeleteLayerVersion
                  - lambda:GetEventSourceMapping
                  - lambda:GetFunction
                  - lambda:GetFunctionCodeSigningConfig
                  - lambda:GetLayerVersion #
                  - lambda:GetPolicy
                  - lambda:GetRuntimeManagementConfig
                  - lambda:InvokeFunction
                  - lambda:PublishLayerVersion
                  - lambda:TagResource
                  - lambda:RemoveLayerVersionPermission
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateEventSourceMapping
                  - lambda:*Tags
                  - lambda:UntagResource
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogGroup
                  - logs:DeleteLogStream
                  - logs:DescribeLogGroups
                  - logs:ListTagsForResource
                  - logs:PutRetentionPolicy
                  - logs:TagResource
                  - organizations:DescribeOrganization
                  - organizations:ListAWSServiceAccessForOrganization
                  - organizations:ListDelegatedAdministrators
                  - s3:*
                  - sns:Subscribe
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:GetTopicAttributes
                  - sns:TagResource
                  - sns:UntagResource
                  - sns:ListSubscriptionsByTopic
                  - ssm:GetParametersByPath
                  - states:CreateStateMachine
                  - states:DescribeStateMachine
                  - states:DeleteStateMachine
                  - states:TagResource
                  - states:ListTagsForResource
                  - states:UntagResource
                  - states:UpdateStateMachine
                  - states:UpdateStateMachineAlias
                Resource: "*" 

  AmplifyApp:
    Type: "AWS::Amplify::App"
    Properties:
      Name: TEAM-IDC-APP
      Repository: !Sub https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/team-idc-app
      Description: Temporary Elevated Access Management Application
      CustomRules:
        - Source: /<*>
          Status: 404
          Target: /index.html
        - Source: </^[^.]+$|\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>
          Status: 200
          Target: /index.html
      EnvironmentVariables: 
        - Name: AMPLIFY_DESTRUCTIVE_UPDATES
          Value: true


      BuildSpec: |-
        version: 1
        backend:
          phases:
            preBuild:
              commands:
                - npm i -g @aws-amplify/cli@10.7.3
                - '# Update deployment parameters with helper script'
                - node parameters.js
            build:
              commands:
                - npm i -S graphql-ttl-transformer
                - '# Execute Amplify CLI with the helper script'
                - update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.9 11
                - /usr/local/bin/pip3.9 install --user pipenv==2023.6.12
                - amplifyPush --simple --allow-destructive-graphql-schema-update
        frontend:
          phases:
            preBuild:
              commands:
                - npm ci
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: build
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
      Tags:
        - Key: Name
          Value: TEAM
      IAMServiceRole: !GetAtt AmplifyRole.Arn

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: main
      AppId: !GetAtt AmplifyApp.AppId
      EnableAutoBuild: true
      EnvironmentVariables: 
        - Name: SSO_LOGIN
          Value: !Ref Login
        - Name: TEAM_ACCOUNT
          Value: !Ref teamAccount
        - Name: CLOUDTRAIL_AUDIT_LOGS
          Value: !If
            - IsEmptyCloudTrailAuditLogs
            - "read_write"
            - !Ref CloudTrailAuditLogs
        - Name: TEAM_ADMIN_GROUP
          Value: !Ref teamAdminGroup
        - Name: TEAM_AUDITOR_GROUP
          Value: !Ref teamAuditGroup
        - Name: TAGS
          Value: !Ref tags
      Tags:
        - Key: Branch
          Value: main
  
  TriggerBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt AmplifyLambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import logging
          from botocore.exceptions import ClientError
          client = boto3.client('amplify')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info("Received event: %s" % json.dumps(event))
              appId = event['ResourceProperties']['appId']
              branchName = event['ResourceProperties']['branchName']
          
              result = cfnresponse.SUCCESS
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      response = client.start_job(
                          appId = appId,
                          branchName = branchName,
                          jobType='RELEASE'
                      )
                  elif event['RequestType'] == 'Delete':
                      pass
              except ClientError as e:
                  logger.error('Error: %s', e)
                  result = cfnresponse.FAILED
              cfnresponse.send(event, context, result, {})

  AmplifyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: AmplifyLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: startBuild
                Effect: Allow
                Action: 
                  - "amplify:StartJob"
                Resource: "*"
Outputs:
  DefaultDomain:
    Value: !GetAtt AmplifyApp.DefaultDomain
